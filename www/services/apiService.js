import { getOpenAIKey } from './apiKeyManager.js';
import { showNotification } from '../ui/app.js';

const isDebug = true; // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º

function log(...args) {
  if (isDebug) console.log('[ü§ñ]', ...args);
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ OpenAI API.
 * @param {Array} messages - –ú–∞—Å—Å–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è GPT.
 * @param {string} apiKey - API-–∫–ª—é—á.
 * @returns {string} –û—Ç–≤–µ—Ç GPT –∏–ª–∏ "[–ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç]".
 */
async function requestGPT(messages, apiKey) {
  log('–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ GPT:', JSON.stringify(messages, null, 2));
  const body = {
    model: 'gpt-3.5-turbo',
    messages,
    temperature: 0.6
  };

  try {
    log('–§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å: model=gpt-3.5-turbo, temperature=0.6');
    const res = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${apiKey}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(body)
    });

    log('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ–ª—É—á–µ–Ω, —Å—Ç–∞—Ç—É—Å:', res.status);
    if (!res.ok) {
      throw new Error(`HTTP –æ—à–∏–±–∫–∞: ${res.status} ${res.statusText}`);
    }

    const json = await res.json();
    log('–ü–æ–ª—É—á–µ–Ω JSON –æ—Ç GPT:', JSON.stringify(json, null, 2));
    const content = json.choices?.[0]?.message?.content;
    if (!content) {
      log('GPT –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç:', JSON.stringify(json, null, 2));
      showNotification('GPT –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç', 'error');
      return '[–ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç]';
    }
    log('–û—Ç–≤–µ—Ç –æ—Ç GPT:', content);
    return content;
  } catch (error) {
    log('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ GPT:', error.message, error.stack);
    showNotification('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ GPT', 'error');
    throw error;
  }
}

/**
 * –°–æ–∑–¥–∞—ë—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–æ–≤.
 * @param {Array} answers - –û—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 * @returns {string} –û–ø–∏—Å–∞–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞.
 */
async function sendAvatarRequest(answers) {
  log('–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞, –æ—Ç–≤–µ—Ç—ã:', JSON.stringify(answers, null, 2));
  const apiKey = getOpenAIKey();
  if (!apiKey) {
    log('–ù–µ—Ç API-–∫–ª—é—á–∞ –¥–ª—è sendAvatarRequest');
    showNotification('–ù–µ—Ç API-–∫–ª—é—á–∞', 'error');
    throw new Error('–ù–µ—Ç API-–∫–ª—é—á–∞.');
  }

  const messages = [
    {
      role: 'system',
      content: '–¢—ã —Å–æ–∑–¥–∞—ë—à—å –æ–±—Ä–∞–∑ RPG-–ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –í–µ—Ä–Ω–∏ –∫—Ä–∞—Ç–∫–æ–µ –∫—Ä–∞—Å–∏–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –µ–≥–æ –≤–Ω–µ—à–Ω–æ—Å—Ç–∏ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è). –ë–µ–∑ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç.'
    },
    {
      role: 'user',
      content: `–û—Ç–≤–µ—Ç—ã:\n${answers.map((a, i) => `[${i + 1}] ${a}`).join('\n')}`
    }
  ];

  log('–°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è GPT (sendAvatarRequest):', JSON.stringify(messages, null, 2));
  const result = await requestGPT(messages, apiKey);
  log('–†–µ–∑—É–ª—å—Ç–∞—Ç sendAvatarRequest:', result);
  return result;
}

/**
 * –û—Ü–µ–Ω–∏–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –¥–ª—è –∞—Ç—Ä–∏–±—É—Ç–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.
 * @param {string} attribute - –ù–∞–∑–≤–∞–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç–∞.
 * @param {string} answer - –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 * @returns {number} –û—Ü–µ–Ω–∫–∞ –≤ XP (10, 30, 60, 100, 150).
 */
async function scoreAttributeAnswer(attribute, answer) {
  log('–û—Ü–µ–Ω–∫–∞ –∞—Ç—Ä–∏–±—É—Ç–∞:', attribute, '–û—Ç–≤–µ—Ç:', answer);
  const apiKey = getOpenAIKey();
  if (!apiKey) {
    log('–ù–µ—Ç API-–∫–ª—é—á–∞ –¥–ª—è scoreAttributeAnswer');
    showNotification('–ù–µ—Ç API-–∫–ª—é—á–∞', 'error');
    throw new Error('–ù–µ—Ç API-–∫–ª—é—á–∞.');
  }

  const messages = [
    {
      role: 'system',
      content: `–¢—ã –æ—Ü–µ–Ω–∏–≤–∞–µ—à—å –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è RPG-–ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –í–µ—Ä–Ω–∏ —á–∏—Å–ª–æ XP (10, 30, 60, 100, 150), –≥–¥–µ:
- 10 XP: –∫–∞—á–µ—Å—Ç–≤–æ "${attribute}" —Å–ª–∞–±–æ –≤—ã—Ä–∞–∂–µ–Ω–æ (—É—Ä–æ–≤–µ–Ω—å 1).
- 30 XP: –∫–∞—á–µ—Å—Ç–≤–æ "${attribute}" —É–º–µ—Ä–µ–Ω–Ω–æ –≤—ã—Ä–∞–∂–µ–Ω–æ (—É—Ä–æ–≤–µ–Ω—å 2).
- 60 XP: –∫–∞—á–µ—Å—Ç–≤–æ "${attribute}" —Ö–æ—Ä–æ—à–æ –≤—ã—Ä–∞–∂–µ–Ω–æ (—É—Ä–æ–≤–µ–Ω—å 3).
- 100 XP: –∫–∞—á–µ—Å—Ç–≤–æ "${attribute}" —Å–∏–ª—å–Ω–æ –≤—ã—Ä–∞–∂–µ–Ω–æ (—É—Ä–æ–≤–µ–Ω—å 4).
- 150 XP: –∫–∞—á–µ—Å—Ç–≤–æ "${attribute}" –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –≤—ã—Ä–∞–∂–µ–Ω–æ (—É—Ä–æ–≤–µ–Ω—å 5).
–°—É–º–º–∞ XP –¥–ª—è –≤—Å–µ—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 300. –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û —á–∏—Å–ª–æ (10, 30, 60, 100, 150).`
    },
    {
      role: 'user',
      content: `–ê—Ç—Ä–∏–±—É—Ç: ${attribute}\n–û—Ç–≤–µ—Ç: ${answer}`
    }
  ];

  log('–°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è GPT (scoreAttributeAnswer):', JSON.stringify(messages, null, 2));
  const raw = await requestGPT(messages, apiKey);
  log('–°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç GPT –¥–ª—è scoreAttributeAnswer:', raw);
  const xp = parseInt(raw.trim());

  if (isNaN(xp) || ![10, 30, 60, 100, 150].includes(xp)) {
    log('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ XP –æ—Ç GPT:', raw, '–í–æ–∑–≤—Ä–∞—â–∞–µ–º 10 XP –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
    showNotification('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ XP –æ—Ç GPT', 'error');
    return 10; // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π XP –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  }

  log(`–ù–∞–∑–Ω–∞—á–µ–Ω XP –¥–ª—è –∞—Ç—Ä–∏–±—É—Ç–∞ "${attribute}": ${xp}`);
  return xp;
}

/**
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞—á–∞–ª—å–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤.
 * @param {Array} answers - –û—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 * @returns {Array} –ú–∞—Å—Å–∏–≤ –Ω–∞–≤—ã–∫–æ–≤.
 */
async function analyzeSkillsFromAnswers(answers) {
  log('–ê–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–≤—ã–∫–æ–≤:', JSON.stringify(answers, null, 2));
  const apiKey = getOpenAIKey();
  if (!apiKey) {
    log('–ù–µ—Ç API-–∫–ª—é—á–∞ –¥–ª—è analyzeSkillsFromAnswers');
    showNotification('–ù–µ—Ç API-–∫–ª—é—á–∞', 'error');
    throw new Error('–ù–µ—Ç API-–∫–ª—é—á–∞.');
  }

  const messages = [
    {
      role: 'system',
      content: `–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é RPG-–ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ 1-3 –Ω–∞—á–∞–ª—å–Ω—ã—Ö –Ω–∞–≤—ã–∫–∞. –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON-–º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ —Å –ø–æ–ª—è–º–∏:
- name: –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–≤—ã–∫–∞
- description: –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
- xp: –Ω–∞—á–∞–ª—å–Ω—ã–π XP (1-5)
- attributes: –º–∞—Å—Å–∏–≤ –∏–∑ 2-4 –∞—Ç—Ä–∏–±—É—Ç–æ–≤ (–∏–∑ —Å–ø–∏—Å–∫–∞: –ª–æ–≤–∫–æ—Å—Ç—å, —ç–Ω–µ—Ä–≥–∏—è, –≤–æ–ª—è, –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç, –º—É–¥—Ä–æ—Å—Ç—å, —Ö–∞—Ä–∏–∑–º–∞, —Å–∏–ª–∞, –¥—É—Ö)
- emoji: –ø–æ–¥—Ö–æ–¥—è—â–∏–π —ç–º–æ–¥–∑–∏

–ü—Ä–∏–º–µ—Ä:
[
  {
    "name": "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ",
    "description": "–ù–∞–ø–∏—Å–∞–Ω–∏–µ –∫–æ–¥–∞",
    "xp": 3,
    "attributes": ["–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç", "–º—É–¥—Ä–æ—Å—Ç—å", "–≤–æ–ª—è", "–¥—É—Ö"],
    "emoji": "üíª"
  }
]`
    },
    {
      role: 'user',
      content: `–û—Ç–≤–µ—Ç—ã:\n${answers.map((a, i) => `[${i + 1}] ${a}`).join('\n')}`
    }
  ];

  log('–°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è GPT (analyzeSkillsFromAnswers):', JSON.stringify(messages, null, 2));
  const raw = await requestGPT(messages, apiKey);
  log('GPT –æ—Ç–≤–µ—Ç (–∞–Ω–∞–ª–∏–∑ –Ω–∞–≤—ã–∫–æ–≤):', raw);

  try {
    const match = raw.match(/\[\s*\{[\s\S]*?\}\s*(?:,\s*\{[\s\S]*?\}\s*)*\]/);
    if (!match) throw new Error('JSON-–º–∞—Å—Å–∏–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    log('–ù–∞–π–¥–µ–Ω JSON-–º–∞—Å—Å–∏–≤:', match[0]);
    const parsed = JSON.parse(match[0]);
    if (!Array.isArray(parsed)) throw new Error('–û—Ç–≤–µ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º.');
    log('–†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', JSON.stringify(parsed, null, 2));
    const validated = parsed.map(skill => ({
      name: skill.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –Ω–∞–≤—ã–∫',
      description: skill.description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è',
      xp: Math.max(1, Math.min(5, parseInt(skill.xp) || 1)),
      attributes: Array.isArray(skill.attributes) && skill.attributes.length >= 2 && skill.attributes.length <= 4
        ? skill.attributes.filter(attr => ['–ª–æ–≤–∫–æ—Å—Ç—å', '—ç–Ω–µ—Ä–≥–∏—è', '–≤–æ–ª—è', '–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç', '–º—É–¥—Ä–æ—Å—Ç—å', '—Ö–∞—Ä–∏–∑–º–∞', '—Å–∏–ª–∞', '–¥—É—Ö'].includes(attr))
        : ['–ª–æ–≤–∫–æ—Å—Ç—å', '—ç–Ω–µ—Ä–≥–∏—è', '–≤–æ–ª—è', '–¥—É—Ö'],
      emoji: skill.emoji || 'üåü'
    }));
    log('–í–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞–≤—ã–∫–∏:', JSON.stringify(validated, null, 2));
    return validated;
  } catch (e) {
    log('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–∞–≤—ã–∫–æ–≤:', e.message, e.stack, '–û—Ç–≤–µ—Ç GPT:', raw);
    showNotification('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–∞–≤—ã–∫–æ–≤', 'error');
    const fallbackSkills = [];
    const lowerText = answers.join(' ').toLowerCase();
    log('–¢–µ–∫—Å—Ç –¥–ª—è fallback –∞–Ω–∞–ª–∏–∑–∞:', lowerText);
    if (lowerText.includes('–±–µ–≥') || lowerText.includes('–ø—Ä–æ–±–µ–∂–∞–ª')) {
      fallbackSkills.push({
        name: '–ë–µ–≥',
        description: '–ë–µ–≥ –Ω–∞ –¥–∏—Å—Ç–∞–Ω—Ü–∏—é',
        xp: 1,
        attributes: ['–ª–æ–≤–∫–æ—Å—Ç—å', '—ç–Ω–µ—Ä–≥–∏—è', '–≤–æ–ª—è', '–¥—É—Ö'],
        emoji: 'üèÉ'
      });
    }
    if (lowerText.includes('–≤–µ–ª–æ—Å–∏–ø–µ–¥') || lowerText.includes('–ø—Ä–æ–∫–∞—Ç–∏–ª—Å—è')) {
      fallbackSkills.push({
        name: '–ï–∑–¥–∞ –Ω–∞ –≤–µ–ª–æ—Å–∏–ø–µ–¥–µ',
        description: '–ï–∑–¥–∞ –Ω–∞ –≤–µ–ª–æ—Å–∏–ø–µ–¥–µ',
        xp: 1,
        attributes: ['–ª–æ–≤–∫–æ—Å—Ç—å', '—ç–Ω–µ—Ä–≥–∏—è', '–≤–æ–ª—è', '–¥—É—Ö'],
        emoji: 'üö¥'
      });
    }
    log('Fallback –Ω–∞–≤—ã–∫–∏:', JSON.stringify(fallbackSkills, null, 2));
    return fallbackSkills;
  }
}

/**
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–Ω–µ–≤–Ω–∏–∫–∞ –¥–ª—è –Ω–∞–≤—ã–∫–æ–≤ –∏ –ª–µ—Ç–æ–ø–∏—Å–∏.
 * @param {string} text - –¢–µ–∫—Å—Ç –¥–Ω–µ–≤–Ω–∏–∫–∞.
 * @returns {Object} –û–±—ä–µ–∫—Ç —Å –Ω–∞–≤—ã–∫–∞–º–∏ –∏ –ª–µ—Ç–æ–ø–∏—Å—å—é.
 */
async function analyzeEntry(text) {
  log('–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–Ω–µ–≤–Ω–∏–∫–∞:', text);
  const apiKey = getOpenAIKey();
  if (!apiKey) {
    log('–ù–µ—Ç API-–∫–ª—é—á–∞ –¥–ª—è analyzeEntry');
    showNotification('–ù–µ—Ç API-–∫–ª—é—á–∞', 'error');
    throw new Error('–ù–µ—Ç API-–∫–ª—é—á–∞.');
  }

  const messages = [
    {
      role: 'system',
      content: `–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∞–Ω–∞–ª–∏–∑—É –¥–Ω–µ–≤–Ω–∏–∫–∞ –≤ RPG-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ–∫—Å—Ç –∏ –≤—ã–¥–µ–ª–∏ –Ω–∞–≤—ã–∫–∏ (1-3) –∏ —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—É—é –∑–∞–ø–∏—Å—å –¥–ª—è –ª–µ—Ç–æ–ø–∏—Å–∏. –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON-–æ–±—ä–µ–∫—Ç —Å –ø–æ–ª—è–º–∏:
- skills: –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ —Å –ø–æ–ª—è–º–∏:
  - name: –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–≤—ã–∫–∞
  - description: –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
  - xp: XP (1-5)
  - attributes: –º–∞—Å—Å–∏–≤ –∏–∑ 2-4 –∞—Ç—Ä–∏–±—É—Ç–æ–≤ (–∏–∑ —Å–ø–∏—Å–∫–∞: –ª–æ–≤–∫–æ—Å—Ç—å, —ç–Ω–µ—Ä–≥–∏—è, –≤–æ–ª—è, –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç, –º—É–¥—Ä–æ—Å—Ç—å, —Ö–∞—Ä–∏–∑–º–∞, —Å–∏–ª–∞, –¥—É—Ö)
  - emoji: –ø–æ–¥—Ö–æ–¥—è—â–∏–π —ç–º–æ–¥–∑–∏
- newChronicle: —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –ª–µ—Ç–æ–ø–∏—Å–∏ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å)

–ü—Ä–∏–º–µ—Ä:
{
  "skills": [
    {
      "name": "–ë–µ–≥",
      "description": "–ë–µ–≥ –Ω–∞ –¥–∏—Å—Ç–∞–Ω—Ü–∏—é",
      "xp": 2,
      "attributes": ["–ª–æ–≤–∫–æ—Å—Ç—å", "—ç–Ω–µ—Ä–≥–∏—è", "–≤–æ–ª—è", "–¥—É—Ö"],
      "emoji": "üèÉ"
    }
  ],
  "newChronicle": "–ì–µ—Ä–æ–π –ø—Ä–æ–±–µ–∂–∞–ª —á–µ—Ä–µ–∑ –ª–µ—Å–∞, —É–∫—Ä–µ–ø–ª—è—è –¥—É—Ö –∏ —Ç–µ–ª–æ."
}`
    },
    {
      role: 'user',
      content: `–¢–µ–∫—Å—Ç:\n"""${text}"""`
    }
  ];

  log('–°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è GPT (analyzeEntry):', JSON.stringify(messages, null, 2));
  const raw = await requestGPT(messages, apiKey);
  log('GPT –æ—Ç–≤–µ—Ç (–∞–Ω–∞–ª–∏–∑ –¥–Ω–µ–≤–Ω–∏–∫–∞):', raw);

  try {
    const parsed = JSON.parse(raw);
    if (!Array.isArray(parsed.skills)) throw new Error('Skills –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º.');
    log('–†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', JSON.stringify(parsed, null, 2));
    const validated = {
      skills: parsed.skills.map(skill => ({
        name: skill.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –Ω–∞–≤—ã–∫',
        description: skill.description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è',
        xp: Math.max(1, Math.min(5, parseInt(skill.xp) || 1)),
        attributes: Array.isArray(skill.attributes) && skill.attributes.length >= 2 && skill.attributes.length <= 4
          ? skill.attributes.filter(attr => ['–ª–æ–≤–∫–æ—Å—Ç—å', '—ç–Ω–µ—Ä–≥–∏—è', '–≤–æ–ª—è', '–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç', '–º—É–¥—Ä–æ—Å—Ç—å', '—Ö–∞—Ä–∏–∑–º–∞', '—Å–∏–ª–∞', '–¥—É—Ö'].includes(attr))
          : ['–ª–æ–≤–∫–æ—Å—Ç—å', '—ç–Ω–µ—Ä–≥–∏—è', '–≤–æ–ª—è', '–¥—É—Ö'],
        emoji: skill.emoji || 'üåü'
      })),
      newChronicle: typeof parsed.newChronicle === 'string' ? parsed.newChronicle.trim() : text
    };
    log('–í–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', JSON.stringify(validated, null, 2));
    return validated;
  } catch (e) {
    log('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–Ω–µ–≤–Ω–∏–∫–∞:', e.message, e.stack, '–û—Ç–≤–µ—Ç GPT:', raw);
    showNotification('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–Ω–µ–≤–Ω–∏–∫–∞', 'error');
    const fallbackSkills = [];
    const lowerText = text.toLowerCase();
    log('–¢–µ–∫—Å—Ç –¥–ª—è fallback –∞–Ω–∞–ª–∏–∑–∞:', lowerText);
    if (lowerText.includes('–±–µ–≥') || lowerText.includes('–ø—Ä–æ–±–µ–∂–∞–ª')) {
      fallbackSkills.push({
        name: '–ë–µ–≥',
        description: '–ë–µ–≥ –Ω–∞ –¥–∏—Å—Ç–∞–Ω—Ü–∏—é',
        xp: 1,
        attributes: ['–ª–æ–≤–∫–æ—Å—Ç—å', '—ç–Ω–µ—Ä–≥–∏—è', '–≤–æ–ª—è', '–¥—É—Ö'],
        emoji: 'üèÉ'
      });
    }
    if (lowerText.includes('–≤–µ–ª–æ—Å–∏–ø–µ–¥') || lowerText.includes('–ø—Ä–æ–∫–∞—Ç–∏–ª—Å—è')) {
      fallbackSkills.push({
        name: '–ï–∑–¥–∞ –Ω–∞ –≤–µ–ª–æ—Å–∏–ø–µ–¥–µ',
        description: '–ï–∑–¥–∞ –Ω–∞ –≤–µ–ª–æ—Å–∏–ø–µ–¥–µ',
        xp: 1,
        attributes: ['–ª–æ–≤–∫–æ—Å—Ç—å', '—ç–Ω–µ—Ä–≥–∏—è', '–≤–æ–ª—è', '–¥—É—Ö'],
        emoji: 'üö¥'
      });
    }
    if (lowerText.includes('–æ—Ç–∂–∞–ª—Å—è') || lowerText.includes('–æ—Ç–∂–∏–º–∞–Ω–∏—è')) {
      fallbackSkills.push({
        name: '–û—Ç–∂–∏–º–∞–Ω–∏—è',
        description: '–°–∏–ª–æ–≤—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ —Ç–µ–ª–∞',
        xp: 1,
        attributes: ['—Å–∏–ª–∞', '—ç–Ω–µ—Ä–≥–∏—è', '–≤–æ–ª—è', '–¥—É—Ö'],
        emoji: 'üí™'
      });
    }
    log('Fallback –Ω–∞–≤—ã–∫–∏:', JSON.stringify(fallbackSkills, null, 2));
    return {
      skills: fallbackSkills,
      newChronicle: text
    };
  }
}

/**
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —Ç–µ–∫—Å—Ç–µ –¥–Ω–µ–≤–Ω–∏–∫–∞.
 * @param {string} text - –¢–µ–∫—Å—Ç –¥–Ω–µ–≤–Ω–∏–∫–∞.
 * @returns {Object} –û–±—ä–µ–∫—Ç —Å –º–∞—Å—Å–∏–≤–æ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π.
 */
async function analyzeSportEntry(text) {
  log('–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —Ç–µ–∫—Å—Ç–µ:', text);
  const apiKey = getOpenAIKey();
  if (!apiKey) {
    log('–ù–µ—Ç API-–∫–ª—é—á–∞ –¥–ª—è analyzeSportEntry');
    showNotification('–ù–µ—Ç API-–∫–ª—é—á–∞', 'error');
    throw new Error('–ù–µ—Ç API-–∫–ª—é—á–∞.');
  }

  const messages = [
    {
      role: 'system',
      content: `–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∞–Ω–∞–ª–∏–∑—É —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –≤ RPG-–¥–Ω–µ–≤–Ω–∏–∫–µ. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ–∫—Å—Ç –∏ –≤—ã–¥–µ–ª–∏ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–∂–∏–º–∞–Ω–∏—è, –±–µ–≥, –ø–ª–∞–≤–∞–Ω–∏–µ, –π–æ–≥–∞, –µ–∑–¥–∞ –Ω–∞ –≤–µ–ª–æ—Å–∏–ø–µ–¥–µ). –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON-–º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ —Å –ø–æ–ª—è–º–∏:
- name: –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–û—Ç–∂–∏–º–∞–Ω–∏—è", "–ë–µ–≥")
- count: —á–∏—Å–ª–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –∏–ª–∏ –¥–∏—Å—Ç–∞–Ω—Ü–∏—è (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ, –∏–Ω–∞—á–µ null)
- sets: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ö–æ–¥–æ–≤ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ, –∏–Ω–∞—á–µ null)
- date: –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞, –∏–Ω–∞—á–µ —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞)
- comment: –∫—Ä–∞—Ç–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–∑ —Ç–µ–∫—Å—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞)

‚ùó –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å–æ —Å–ø–æ—Ä—Ç–æ–º –∏–ª–∏ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é (–≤–∫–ª—é—á–∞—è –æ—Ç–∂–∏–º–∞–Ω–∏—è, –±–µ–≥, –µ–∑–¥—É –Ω–∞ –≤–µ–ª–æ—Å–∏–ø–µ–¥–µ –∏ —Ç.–¥.).
‚ùó –ï—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–π —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É.
‚ùó –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON-–º–∞—Å—Å–∏–≤, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π.

–ü—Ä–∏–º–µ—Ä:
[
  {
    "name": "–û—Ç–∂–∏–º–∞–Ω–∏—è",
    "count": 20,
    "sets": 2,
    "date": "2025-09-30",
    "comment": "–î–µ–ª–∞–ª —É—Ç—Ä–æ–º –Ω–∞ —É–ª–∏—Ü–µ"
  },
  {
    "name": "–ë–µ–≥",
    "count": 5,
    "sets": null,
    "date": "2025-09-30",
    "comment": "–ë–µ–≥–∞–ª –≤ –ø–∞—Ä–∫–µ"
  }
]`
    },
    {
      role: 'user',
      content: `–¢–µ–∫—Å—Ç:\n"""${text}"""`
    }
  ];

  log('–°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è GPT (analyzeSportEntry):', JSON.stringify(messages, null, 2));
  const raw = await requestGPT(messages, apiKey);
  log('GPT –æ—Ç–≤–µ—Ç (—Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏):', raw);

  try {
    const match = raw.match(/\[\s*\{[\s\S]*?\}\s*(?:,\s*\{[\s\S]*?\}\s*)*\]/);
    if (!match) throw new Error('JSON-–º–∞—Å—Å–∏–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    log('–ù–∞–π–¥–µ–Ω JSON-–º–∞—Å—Å–∏–≤:', match[0]);
    const parsed = JSON.parse(match[0]);
    if (!Array.isArray(parsed)) throw new Error('–û—Ç–≤–µ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º.');
    log('–†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', JSON.stringify(parsed, null, 2));
    const validated = parsed.map(activity => ({
      name: activity.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
      count: activity.count != null ? parseInt(activity.count) : null,
      sets: activity.sets != null ? parseInt(activity.sets) : null,
      date: activity.date || new Date().toISOString().split('T')[0],
      comment: activity.comment || ''
    }));
    log('–í–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', JSON.stringify(validated, null, 2));
    return { activities: validated };
  } catch (e) {
    log('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π:', e.message, e.stack, '–û—Ç–≤–µ—Ç GPT:', raw);
    showNotification('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π', 'error');
    const fallbackActivities = [];
    const lowerText = text.toLowerCase();
    log('–¢–µ–∫—Å—Ç –¥–ª—è fallback –∞–Ω–∞–ª–∏–∑–∞:', lowerText);
    if (lowerText.includes('–±–µ–≥') || lowerText.includes('–ø—Ä–æ–±–µ–∂–∞–ª')) {
      fallbackActivities.push({
        name: '–ë–µ–≥',
        count: lowerText.includes('5 –∫–º') ? 5 : null,
        sets: null,
        date: new Date().toISOString().split('T')[0],
        comment: '–ë–µ–≥ –Ω–∞ –¥–∏—Å—Ç–∞–Ω—Ü–∏—é'
      });
    }
    if (lowerText.includes('–≤–µ–ª–æ—Å–∏–ø–µ–¥') || lowerText.includes('–ø—Ä–æ–∫–∞—Ç–∏–ª—Å—è')) {
      fallbackActivities.push({
        name: '–ï–∑–¥–∞ –Ω–∞ –≤–µ–ª–æ—Å–∏–ø–µ–¥–µ',
        count: null,
        sets: null,
        date: new Date().toISOString().split('T')[0],
        comment: '–ï–∑–¥–∞ –Ω–∞ –≤–µ–ª–æ—Å–∏–ø–µ–¥–µ'
      });
    }
    if (lowerText.includes('–æ—Ç–∂–∞–ª—Å—è') || lowerText.includes('–æ—Ç–∂–∏–º–∞–Ω–∏—è')) {
      fallbackActivities.push({
        name: '–û—Ç–∂–∏–º–∞–Ω–∏—è',
        count: lowerText.includes('10 —Ä–∞–∑') ? 10 : null,
        sets: null,
        date: new Date().toISOString().split('T')[0],
        comment: '–°–∏–ª–æ–≤—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è'
      });
    }
    log('Fallback –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', JSON.stringify(fallbackActivities, null, 2));
    return { activities: fallbackActivities };
  }
}

export {
  sendAvatarRequest,
  scoreAttributeAnswer,
  analyzeEntry,
  analyzeSportEntry,
  analyzeSkillsFromAnswers
};