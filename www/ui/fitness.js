import { loadCharacter, saveCharacter } from '../core/character.js';
import { showNotification } from './app.js';
import { analyzeSportEntry } from '../services/apiService.js';

function renderFitness() {
  console.log("[üèãÔ∏è] –†–µ–Ω–¥–µ—Ä–∏–º –≤–∫–ª–∞–¥–∫—É –§–∏—Ç–Ω–µ—Å");
  const container = document.getElementById("fitness");
  if (!container) {
    console.error("‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä #fitness –Ω–µ –Ω–∞–π–¥–µ–Ω");
    return;
  }

  const character = loadCharacter();
  if (!character) {
    console.warn("‚ö†Ô∏è –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–µ —Ä–µ–Ω–¥–µ—Ä–∏—Ç—Å—è");
    return;
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º fitnessActivities, –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
  character.fitnessActivities = character.fitnessActivities || [];
  console.log("[üèãÔ∏è] –§–∏—Ç–Ω–µ—Å-–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:", JSON.stringify(character.fitnessActivities, null, 2));

  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –∏ –≥–æ–¥ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π
  let currentDate = new Date();
  const storedMonth = localStorage.getItem('fitnessMonth');
  if (storedMonth) {
    const [year, month] = storedMonth.split('-').map(Number);
    currentDate = new Date(year, month);
  }
  const year = currentDate.getFullYear();
  const month = currentDate.getMonth();
  const firstDay = new Date(year, month, 1);
  const lastDay = new Date(year, month + 1, 0);
  const daysInMonth = lastDay.getDate();
  const firstDayOfWeek = firstDay.getDay() || 7; // 1 = –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, 7 = –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ

  // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
  let calendarHTML = `
    <div class="fitness-container">
      <div class="calendar-header">
        <button id="prevMonth">‚óÑ</button>
        <h3>–§–∏—Ç–Ω–µ—Å: ${currentDate.toLocaleString('ru-RU', { month: 'long', year: 'numeric' })}</h3>
        <button id="nextMonth">‚ñ∫</button>
      </div>
      <div style="margin-bottom: 10px;">
        <button id="cleanOldActivities">–û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</button>
      </div>
      <table class="fitness-calendar">
        <thead>
          <tr>
            <th>–ü–Ω</th><th>–í—Ç</th><th>–°—Ä</th><th>–ß—Ç</th><th>–ü—Ç</th><th>–°–±</th><th>–í—Å</th>
          </tr>
        </thead>
        <tbody>
  `;

  let day = 1;
  let isFirstWeek = true;
  while (day <= daysInMonth) {
    calendarHTML += '<tr>';
    for (let i = 1; i <= 7; i++) {
      if (isFirstWeek && i < firstDayOfWeek) {
        calendarHTML += '<td></td>';
      } else if (day <= daysInMonth) {
        const dateStr = `${year}-${String(month + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;
        const activities = character.fitnessActivities.filter(a => a.date === dateStr);
        const activityText = activities.length > 0
          ? activities.map(a => `${a.activityEmoji || 'üèãÔ∏è'} ${a.text}`).join(', ')
          : '';
        calendarHTML += `
          <td class="calendar-day" data-date="${dateStr}" style="cursor: pointer">
            <span class="day-number">${day}</span>
            <div class="activity-text">${activityText}</div>
          </td>`;
        day++;
      } else {
        calendarHTML += '<td></td>';
      }
    }
    calendarHTML += '</tr>';
    isFirstWeek = false;
  }

  calendarHTML += `
        </tbody>
      </table>
    </div>
    <div id="fitnessModal" class="modal" style="display: none;">
      <div class="modal-content">
        <h3 id="modalTitle">–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</h3>
        <input id="modalInput" class="modal-input" placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ë–µ–≥ 5 —Ä–∞–∑">
        <button id="modalAdd" class="modal-button">–î–æ–±–∞–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</button>
        <div id="modalActivities" class="modal-activities"></div>
        <button id="modalClose" class="modal-button">–ó–∞–∫—Ä—ã—Ç—å</button>
      </div>
    </div>
  `;

  container.innerHTML = calendarHTML;

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ—Å—è—Ü–µ–≤
  document.getElementById("prevMonth")?.addEventListener("click", () => {
    currentDate.setMonth(currentDate.getMonth() - 1);
    localStorage.setItem('fitnessMonth', `${currentDate.getFullYear()}-${currentDate.getMonth()}`);
    renderFitness();
  });

  document.getElementById("nextMonth")?.addEventListener("click", () => {
    currentDate.setMonth(currentDate.getMonth() + 1);
    localStorage.setItem('fitnessMonth', `${currentDate.getFullYear()}-${currentDate.getMonth()}`);
    renderFitness();
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
  const cleanButton = document.getElementById("cleanOldActivities");
  if (cleanButton) {
    cleanButton.addEventListener("click", () => {
      console.log("[üèãÔ∏è] –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏'");
      const initialCount = character.fitnessActivities.length;
      character.fitnessActivities = character.fitnessActivities.filter(a => a.date.startsWith('2025'));
      const removedCount = initialCount - character.fitnessActivities.length;
      saveCharacter(character);
      console.log(`[üèãÔ∏è] –£–¥–∞–ª–µ–Ω–æ ${removedCount} —Å—Ç–∞—Ä—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π, –æ—Å—Ç–∞–ª–æ—Å—å:`, JSON.stringify(character.fitnessActivities, null, 2));
      showNotification(`–£–¥–∞–ª–µ–Ω–æ ${removedCount} —Å—Ç–∞—Ä—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π`, 'success');
      renderFitness();
    });
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –¥–Ω—é
  document.querySelectorAll(".calendar-day").forEach(day => {
    day.addEventListener("click", () => {
      const date = day.getAttribute("data-date");
      if (!date) return;

      console.log("[üèãÔ∏è] –ö–ª–∏–∫ –ø–æ –¥–Ω—é:", date);
      showModal(date, character);
    });
  });
}

function showModal(date, character) {
  const modal = document.getElementById("fitnessModal");
  const modalTitle = document.getElementById("modalTitle");
  const modalInput = document.getElementById("modalInput");
  const modalActivities = document.getElementById("modalActivities");
  const modalAdd = document.getElementById("modalAdd");
  const modalClose = document.getElementById("modalClose");

  modalTitle.textContent = `–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ ${date}`;
  const activities = character.fitnessActivities.filter(a => a.date === date);
  modalActivities.innerHTML = activities.length
    ? `<ul>${activities.map(a => `<li>${a.activityEmoji || 'üèãÔ∏è'} ${a.text}</li>`).join('')}</ul>`
    : '<p>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å.</p>';

  modal.style.display = 'block';

  modalAdd.onclick = async () => {
    try {
      const input = modalInput.value.trim();
      if (!input) {
        console.warn("[üèãÔ∏è] –ü—É—Å—Ç–æ–π –≤–≤–æ–¥ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ");
        showNotification("–í–≤–µ–¥–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", 'error');
        return;
      }

      const sportResult = await analyzeSportEntry(input);
      console.log("[üèãÔ∏è] –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:", JSON.stringify(sportResult, null, 2));
      if (sportResult && Array.isArray(sportResult.activities) && sportResult.activities.length) {
        const activity = sportResult.activities[0];
        if (!activity.name || typeof activity.name !== 'string') {
          console.warn("[üèãÔ∏è] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:", JSON.stringify(activity));
          showNotification("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", 'error');
          return;
        }

        const activityData = {
          date,
          text: `${activity.name}${activity.count ? ` ${activity.count} —Ä–∞–∑` : ''}${activity.sets ? ` (${activity.sets} –ø–æ–¥—Ö–æ–¥–∞)` : ''}${activity.comment ? ` - ${activity.comment}` : ''}`,
          activityEmoji: getEmojiForActivity(activity.name)
        };

        const isDuplicate = character.fitnessActivities.some(
          existing => existing.date === date && existing.text === activityData.text
        );
        if (!isDuplicate) {
          character.fitnessActivities.push(activityData);
          saveCharacter(character);
          console.log("[üèãÔ∏è] –î–æ–±–∞–≤–ª–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:", activityData);
          showNotification(`–î–æ–±–∞–≤–ª–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${activity.name}`, 'success');
          modalInput.value = '';
          renderFitness();
        } else {
          console.log("[üèãÔ∏è] –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:", activityData);
          showNotification("–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞", 'error');
        }
      } else {
        console.warn("[üèãÔ∏è] –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:", input);
        showNotification("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", 'error');
      }
    } catch (e) {
      console.error("[üèãÔ∏è] –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:", e);
      showNotification("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", 'error');
    }
  };

  modalClose.onclick = () => {
    console.log("[üèãÔ∏è] –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ");
    modal.style.display = 'none';
  };

  modal.onclick = (e) => {
    if (e.target === modal) {
      console.log("[üèãÔ∏è] –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞");
      modal.style.display = 'none';
    }
  };
}

function getEmojiForActivity(activityName) {
  const skillEmojiMap = {
    '–≥–æ—Ç–æ–≤–∫–∞': 'üç≥',
    '–±–µ–≥': 'üèÉ',
    '–µ–∑–¥–∞ –Ω–∞ –≤–µ–ª–æ—Å–∏–ø–µ–¥–µ': 'üö¥',
    '–ø–ª–∞–≤–∞–Ω–∏–µ': 'üèä',
    '–π–æ–≥–∞': 'üßò',
    '—Ñ–∏–∑–∏—á–µ—Å–∫–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞': '‚õπÔ∏è',
    '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ': 'üíª',
    '–∏–≥—Ä–∞ –≤ –∫–æ–º–ø—å—é—Ç–µ—Ä': 'üéÆ'
  };
  return skillEmojiMap[activityName.toLowerCase()] || 'üèãÔ∏è';
}

export { renderFitness };