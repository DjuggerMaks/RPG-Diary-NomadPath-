import { loadCharacter, saveCharacter, resetCharacter, createCharacterFromInit } from '../core/character.js';
import { showOnboardingModal } from './onboarding.js';
import { xpDetails } from '../core/skillsModel.js';

const isDebug = true; // –≤–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
function log(...args) {
  if (isDebug) console.log('[üë§]', ...args);
}

/**
 * –ì–ª–æ–±–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Å—á–∏—Ç–∞–µ—Ç—Å—è –∏–∑ –°–£–ú–ú–´ —É—Ä–æ–≤–Ω–µ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫:
 * level = floor(sum(attr.level) / 10)
 * progress = sum(attr.level) % 10
 * required = 10
 * –ï—Å–ª–∏ –≤ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ —É–∂–µ –µ—Å—Ç—å character.globalProgress / globalRequired ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö.
 */
function getGlobalProgress(character) {
  if (!character) return { level: 0, current: 0, required: 10, percent: 0 };

  // –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è, —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ progression.applyGlobalXP
  if (typeof character.level === 'number' &&
      typeof character.globalProgress === 'number' &&
      typeof character.globalRequired === 'number') {
    const level = character.level;
    const current = character.globalProgress;
    const required = character.globalRequired || 10;
    const percent = required > 0 ? Math.floor((current / required) * 100) : 0;
    log(`–ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å (–∏–∑ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞): L${level} ${current}/${required} (${percent}%)`);
    return { level, current, required, percent };
  }

  // –§–æ–ª–ª–±–µ–∫ ‚Äî —Å—á–∏—Ç–∞–µ–º –Ω–∞ –ª–µ—Ç—É –∏–∑ –∞—Ç—Ä–∏–±—É—Ç–æ–≤
  const attributes = character.attributes || {};
  const totalAttributeLevels = Object.values(attributes).reduce((sum, a) => sum + (a?.level || 0), 0);
  const level = Math.floor(totalAttributeLevels / 10);
  const current = totalAttributeLevels % 10;
  const required = 10;
  const percent = required > 0 ? Math.floor((current / required) * 100) : 0;
  log(`–ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å (fallback): —Å—É–º–º–∞—Ä–Ω–æ ${totalAttributeLevels} —É—Ä–æ–≤–Ω–µ–π –∞—Ç—Ä–∏–±—É—Ç–æ–≤ ‚Üí L${level} ${current}/${required}`);
  return { level, current, required, percent };
}

function renderProfile() {
  const character = loadCharacter();
  const container = document.getElementById("profile");
  if (!container) return console.error("[üßë] –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä #profile –Ω–µ –Ω–∞–π–¥–µ–Ω");

  if (!character || !character.name || !character.generatedDescription) {
    // –≠–∫—Ä–∞–Ω —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    container.innerHTML = `
      <div style="display:flex;gap:30px;flex-wrap:wrap;align-items:flex-start;">
        <div style="flex:1;min-width:280px;">
          <h3>–ü—Ä–æ—Ñ–∏–ª—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞</h3>
          <div style="text-align:center;">
            <h2 id="profileDisplayName">–ü—É—Ç–Ω–∏–∫</h2>
            <div id="avatarPreview" style="margin-top:10px;"><p style="color:#888;">–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</p></div>
            <p style="margin-top:10px;">–£—Ä–æ–≤–µ–Ω—å: 0</p>
            <div style="background:#444;height:12px;border-radius:6px;overflow:hidden;margin:4px 0;">
              <div style="background:#6c6;width:0%;height:100%;"></div>
            </div>
            <small style="color:#ccc;">0 / 10 XP –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è</small>
            <p style="font-style:italic;color:#ccc;margin-top:10px;">–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è</p>
          </div>
        </div>
        <div style="flex:1;min-width:300px;" id="profileEdit">
          <h3>–°–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞</h3>
          <input id="profileName" type="text" placeholder="–ò–º—è" style="width:100%;margin-bottom:10px;padding:5px;">
          <textarea id="profileDescription" placeholder="–û–ø–∏—Å–∞–Ω–∏–µ" style="width:100%;height:80px;margin-bottom:10px;padding:5px;"></textarea>
          <input id="profileAvatar" type="file" accept="image/*" style="margin-bottom:10px;">
          <button id="createProfile">–°–æ–∑–¥–∞—Ç—å</button>
        </div>
      </div>
    `;

    document.getElementById("createProfile").addEventListener("click", async () => {
      try {
        const name = document.getElementById("profileName").value.trim();
        const desc = document.getElementById("profileDescription").value.trim();
        const avatarInput = document.getElementById("profileAvatar");
        let avatarData = null;

        if (avatarInput.files && avatarInput.files[0]) {
          avatarData = await new Promise(resolve => {
            const reader = new FileReader();
            reader.onload = () => resolve(reader.result);
            reader.readAsDataURL(avatarInput.files[0]);
          });
        }

        const initData = {
          name: name || '–ü—É—Ç–Ω–∏–∫',
          description: desc || '',
          avatar: avatarData
        };

        log('–°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–∑ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏', initData);
        const created = await createCharacterFromInit(initData);
        log('–ü–µ—Ä—Å–æ–Ω–∞–∂ —Å–æ–∑–¥–∞–Ω', created);

        renderProfile();
      } catch (e) {
        console.error("[üßë] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:", e);
        alert("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞");
      }
    });
  } else {
    // –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    const { level, current, required, percent } = getGlobalProgress(character);
    container.innerHTML = `
      <div style="display:flex;gap:30px;flex-wrap:wrap;align-items:flex-start;">
        <div style="flex:1;min-width:280px;">
          <h3>–ü—Ä–æ—Ñ–∏–ª—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞</h3>
          <div style="text-align:center;">
            <h2 id="profileDisplayName">${character.name || "–ü—É—Ç–Ω–∏–∫"}</h2>
            <div id="avatarPreview" style="margin-top:10px;">
              ${character.avatar ? `<img src="${character.avatar}" alt="–ê–≤–∞—Ç–∞—Ä" style="max-width:200px;border-radius:8px;">` : '<p style="color:#888;">–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</p>'}
            </div>
            <p style="margin-top:10px;">–£—Ä–æ–≤–µ–Ω—å: ${level}</p>
            <div class="xp-progress-bar"><div class="xp-progress-fill" style="width:${percent}%;"></div></div>
            <small style="color:#ccc;">${current} / ${required} –æ—á–∫–æ–≤ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è</small>
            <p style="font-style:italic;color:#ccc;margin-top:10px;">${character.generatedDescription || "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"}</p>
          </div>
        </div>
        <div style="flex:1;min-width:300px;" id="profileEdit">
          <h3>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–º</h3>
          <button id="resetCharacter">–°–±—Ä–æ—Å–∏—Ç—å</button>
        </div>
      </div>
    `;

    // –°–±—Ä–æ—Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    document.getElementById("resetCharacter")?.addEventListener("click", () => {
      const modal = document.createElement("div");
      modal.className = "modal";
      modal.innerHTML = `
        <div class="modal-content">
          <h3>–°–±—Ä–æ—Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞</h3>
          <p>–í—ã —É–≤–µ—Ä–µ–Ω—ã? –î–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.</p>
          <div class="modal-buttons">
            <button class="modal-confirm">–°–±—Ä–æ—Å–∏—Ç—å</button>
            <button class="modal-cancel">–û—Ç–º–µ–Ω–∞</button>
          </div>
        </div>
      `;
      document.body.appendChild(modal);

      modal.querySelector(".modal-confirm").addEventListener("click", () => {
        log('–°–±—Ä–æ—Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞');
        resetCharacter();
        modal.remove();
        showOnboardingModal();
        renderProfile();
      });
      modal.querySelector(".modal-cancel").addEventListener("click", () => modal.remove());
    });
  }
}

export { renderProfile };
