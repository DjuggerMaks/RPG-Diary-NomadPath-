import { loadCharacter, saveCharacter } from '../core/character.js';
import { scoreAttributeAnswer } from '../services/apiService.js';
import { applyProgressionRules } from '../core/progression.js';
import { xpDetails, levelFromXP } from '../core/skillsModel.js';

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (—á–µ—Ä–µ–∑ xpDetails)
 */
function getAttributeProgress(xp) {
  const { level, remainder, needed } = xpDetails(xp || 0);
  const percent = needed > 0 ? Math.floor((remainder / needed) * 100) : 0;
  console.log(`[üìä] –ü—Ä–æ–≥—Ä–µ—Å—Å: —É—Ä–æ–≤–µ–Ω—å ${level}, ${remainder}/${needed} XP (${percent}%)`);
  return { level, current: remainder, required: needed, percent };
}

function renderStats() {
  console.log("[üìä] –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫");
  const character = loadCharacter();
  if (!character) {
    console.warn("[üìä] –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω");
    return;
  }

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —É—Ä–æ–≤–Ω–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
  character.attributeXP = character.attributeXP || {};
  Object.keys(character.attributes).forEach(attr => {
    const xp = character.attributeXP[attr] || 0;
    character.attributes[attr] = { xp, level: levelFromXP(xp) };
  });
  applyProgressionRules(character);

  const container = document.getElementById("stats");
  if (!container) {
    console.error("[üìä] –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä #stats –Ω–µ –Ω–∞–π–¥–µ–Ω");
    return;
  }

  const attrHtml = Object.entries(character.attributes).map(([attr, data]) => {
    const xp = character.attributeXP?.[attr] || 0;
    const { level, current, required, percent } = getAttributeProgress(xp);
    console.log("[üìä] –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞:", { attr, xp, level });
    return `
      <tr>
        <td style="padding:4px;">${attr}</td>
        <td style="padding:4px; text-align:right;">–£—Ä. ${level}</td>
      </tr>
      <tr>
        <td colspan="2" style="padding:0 4px 10px;">
          <div style="background:#444;height:10px;border-radius:5px;overflow:hidden;">
            <div style="width:${percent}%;background:#6c6;height:100%;"></div>
          </div>
          <small style="color:#aaa;">${current} / ${required} XP</small>
        </td>
      </tr>
    `;
  }).join('');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É–º–º—É —É—Ä–æ–≤–Ω–µ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
  const totalAttributes = Object.values(character.attributes).reduce((sum, data) => sum + (data.level || 0), 0);
  const isStage2Visible = totalAttributes === 0;

  container.innerHTML = `
    <div style="display:flex;gap:30px;flex-wrap:wrap;align-items:flex-start;">
      <div style="flex:1;min-width:280px;">
        <h3>–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏</h3>
        <table style="width:100%;border-collapse:collapse;">
          <tbody>${attrHtml}</tbody>
        </table>
      </div>
      <div style="flex:1;min-width:300px;" id="statsEditor" ${isStage2Visible ? '' : 'class="hidden"'}>
        <h3>–≠—Ç–∞–ø 2: –û—Ü–µ–Ω–∫–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫</h3>
        <p style="color:#777;">–û—Ç–≤–µ—Ç—å –Ω–∞ 8 –≤–æ–ø—Ä–æ—Å–æ–≤, —á—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –Ω–∞—á–∞–ª—å–Ω—ã–µ —É—Ä–æ–≤–Ω–∏.</p>
        <button id="startStage2">–ù–∞—á–∞—Ç—å —ç—Ç–∞–ø 2</button>
      </div>
    </div>
  `;

  const startButton = document.getElementById("startStage2");
  if (startButton) {
    startButton.addEventListener("click", () => startStage2(character));
    console.log("[üìä] –ö–Ω–æ–ø–∫–∞ '–ù–∞—á–∞—Ç—å —ç—Ç–∞–ø 2' –ø—Ä–∏–≤—è–∑–∞–Ω–∞");
  } else if (!container.querySelector('#statsEditor.hidden')) {
    console.warn("[üìä] –ö–Ω–æ–ø–∫–∞ '–ù–∞—á–∞—Ç—å —ç—Ç–∞–ø 2' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —ç—Ç–∞–ø –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–≤–µ—Ä—à—ë–Ω");
  }
}

function startStage2(character) {
  console.log("[üìä] –ó–∞–ø—É—Å–∫ —ç—Ç–∞–ø–∞ 2");
  const questions = [
    { attr: "—Å–∏–ª–∞", text: "–ù–∞—Å–∫–æ–ª—å–∫–æ —Ç—ã —Å–∏–ª—ë–Ω —Ñ–∏–∑–∏—á–µ—Å–∫–∏ ‚Äî –º–æ–∂–µ—à—å –ª–∏ –ø–æ–¥–Ω–∏–º–∞—Ç—å —Ç—è–∂—ë–ª—ã–µ –≤–µ—â–∏ –∏–ª–∏ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è —Å–ø–æ—Ä—Ç–æ–º?" },
    { attr: "–ª–æ–≤–∫–æ—Å—Ç—å", text: "–ö–∞–∫ —Ö–æ—Ä–æ—à–æ —Ç—ã —Å–ø—Ä–∞–≤–ª—è–µ—à—å—Å—è —Å –∑–∞–¥–∞—á–∞–º–∏, —Ç—Ä–µ–±—É—é—â–∏–º–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏ –∏–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏?" },
    { attr: "–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç", text: "–ß–∞—Å—Ç–æ –ª–∏ —Ç—ã —Ä–µ—à–∞–µ—à—å —Å–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏–ª–∏ —É—á–∏—à—å—Å—è —á–µ–º—É-—Ç–æ –Ω–æ–≤–æ–º—É?" },
    { attr: "—Ö–∞—Ä–∏–∑–º–∞", text: "–õ–µ–≥–∫–æ –ª–∏ —Ç–µ–±–µ –Ω–∞—Ö–æ–¥–∏—Ç—å –æ–±—â–∏–π —è–∑—ã–∫ —Å –ª—é–¥—å–º–∏ –∏ —É–±–µ–∂–¥–∞—Ç—å –∏—Ö?" },
    { attr: "–≤–æ–ª—è", text: "–°–º–æ–≥ –±—ã —Ç—ã —É—Å—Ç–æ—è—Ç—å –ø–µ—Ä–µ–¥ —Å–æ–±–ª–∞–∑–Ω–æ–º –∏–ª–∏ –∑–∞–∫–æ–Ω—á–∏—Ç—å –Ω–∞—á–∞—Ç–æ–µ, –¥–∞–∂–µ –µ—Å–ª–∏ —Ç—Ä—É–¥–Ω–æ?" },
    { attr: "–¥—É—Ö", text: "–ù–∞—Å–∫–æ–ª—å–∫–æ —Ç—ã —É–≤–µ—Ä–µ–Ω –≤ —Å–µ–±–µ –∏ —Å–≤–æ–∏—Ö —Å–∏–ª–∞—Ö –≤ —Å—Ç—Ä–µ—Å—Å–æ–≤—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö?" },
    { attr: "–º—É–¥—Ä–æ—Å—Ç—å", text: "–ö–∞–∫ —Ç—ã –æ–±—ã—á–Ω–æ –ø—Ä–∏–Ω–∏–º–∞–µ—à—å –≤–∞–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è ‚Äî –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ, —Å –∞–Ω–∞–ª–∏–∑–æ–º –∏–ª–∏ —Å–æ–≤–µ—Ç—É–µ—à—å—Å—è —Å –∫–µ–º-—Ç–æ?" },
    { attr: "—ç–Ω–µ—Ä–≥–∏—è", text: "–ù–∞—Å–∫–æ–ª—å–∫–æ —á–∞—Å—Ç–æ —Ç—ã –æ—â—É—â–∞–µ—à—å –ø—Ä–∏–ª–∏–≤ —Å–∏–ª –∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –¥–µ–π—Å—Ç–≤–∏—é?" }
  ];

  let idx = 0;
  const editor = document.getElementById("statsEditor");

  function renderQuestion() {
    console.log(`[üìä] –†–µ–Ω–¥–µ—Ä –≤–æ–ø—Ä–æ—Å–∞ ${idx + 1}/${questions.length}`);
    const q = questions[idx];
    editor.innerHTML = `
      <h3>–í–æ–ø—Ä–æ—Å ${idx + 1} / ${questions.length}</h3>
      <p>${q.text}</p>
      <textarea id="stage2Answer" style="width:100%;height:80px;"></textarea>
      <div style="margin-top:10px;">
        <button id="prevQ"${idx === 0 ? ' disabled' : ''}>–ù–∞–∑–∞–¥</button>
        <button id="skipQ">–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å</button>
        <button id="nextQ">–û—Ç–≤–µ—Ç–∏—Ç—å</button>
      </div>
    `;

    editor.querySelector('#prevQ')?.addEventListener('click', () => { idx--; renderQuestion(); });
    editor.querySelector('#skipQ').addEventListener('click', () => { idx++; if (idx >= questions.length) finish(); else renderQuestion(); });
    editor.querySelector('#nextQ').addEventListener('click', async () => {
      const val = editor.querySelector('#stage2Answer').value.trim();
      if (!val) { alert("–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª."); return; }
      const attr = questions[idx].attr;
      const score = await scoreAttributeAnswer(attr, val);

      character.attributeXP = character.attributeXP || {};
      character.attributeXP[attr] = score;
      character.attributes[attr] = { xp: score, level: levelFromXP(score) };

      console.log(`[üéØ] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Ä–æ–≤–µ–Ω—å ${character.attributes[attr].level} –∏ XP ${score} –¥–ª—è "${attr}"`);
      idx++;
      if (idx >= questions.length) finish(); else renderQuestion();
    });
  }

  function finish() {
    console.log("[üéØ] –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —ç—Ç–∞–ø–∞ 2");
    applyProgressionRules(character);
    saveCharacter(character);

    const editor = document.getElementById("statsEditor");
    if (editor) { editor.classList.add('hidden'); console.log("[üéØ] –≠—Ç–∞–ø 2 —Å–∫—Ä—ã—Ç"); }

    import('./profile.js').then(m => m.renderProfile());
    import('./stats.js').then(m => m.renderStats());

    alert("–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏ —É—Ä–æ–≤–µ–Ω—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.");
  }

  renderQuestion();
}

export { renderStats };
