import { convertSkillsToGraph } from './progression.js';
import { showNotification } from '../ui/app.js';
import { levelFromXP } from './skillsModel.js';
import { addOrUpdateSkill } from './skillsModel.js';

const STORAGE_KEY = 'nomadpath_character';
const isDebug = true; // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º

function log(...args) {
  if (isDebug) console.log('[üìÅ]', ...args);
}

const defaultCharacter = {
  name: '–ë–µ–∑—ã–º—è–Ω–Ω—ã–π',
  avatar: null,
  generatedDescription: '',
  level: 0,
  xp: 0,
  attributes: {
    —Å–∏–ª–∞: { xp: 0, level: 0 },
    –ª–æ–≤–∫–æ—Å—Ç—å: { xp: 0, level: 0 },
    –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç: { xp: 0, level: 0 },
    —Ö–∞—Ä–∏–∑–º–∞: { xp: 0, level: 0 },
    –≤–æ–ª—è: { xp: 0, level: 0 },
    –¥—É—Ö: { xp: 0, level: 0 },
    –º—É–¥—Ä–æ—Å—Ç—å: { xp: 0, level: 0 },
    —ç–Ω–µ—Ä–≥–∏—è: { xp: 0, level: 0 }
  },
  attributeXP: {},
  skills: [],
  skillGraph: { nodes: [], links: [] },
  habits: [],
  quests: [],
  chronicle: [],
  journal: [],
  fitnessActivities: []
};

function loadCharacter() {
  log('–ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–∑ localStorage, –∫–ª—é—á:', STORAGE_KEY);
  const raw = localStorage.getItem(STORAGE_KEY);
  if (!raw) {
    log('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ localStorage, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null');
    return null;
  }

  try {
    log('–°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage:', raw);
    const parsed = JSON.parse(raw);
    log('–†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', JSON.stringify(parsed, null, 2));

    // –ê–∫–∫—É—Ä–∞—Ç–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è (–¥–æ–ø–æ–ª–Ω—è–µ–º, –∞ –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º)
    parsed.name = parsed.name || defaultCharacter.name;
    parsed.avatar = parsed.avatar || defaultCharacter.avatar;
    parsed.generatedDescription = parsed.generatedDescription || '';
    parsed.level = parsed.level ?? 0;
    parsed.xp = parsed.xp ?? 0;

    parsed.attributes = parsed.attributes || structuredClone(defaultCharacter.attributes);
    for (const attr in defaultCharacter.attributes) {
      if (!parsed.attributes[attr]) {
        parsed.attributes[attr] = { xp: 0, level: 0 };
      } else if (typeof parsed.attributes[attr] === 'number') {
        // –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç (—á–∏—Å–ª–æ XP –≤–º–µ—Å—Ç–æ –æ–±—ä–µ–∫—Ç–∞)
        const xp = parsed.attributes[attr];
        parsed.attributes[attr] = { xp, level: levelFromXP(xp) };
      }
    }

    parsed.skills = Array.isArray(parsed.skills) ? parsed.skills : [];
    parsed.skills = parsed.skills.map(skill => ({
      ...skill,
      xp: typeof skill.xp === 'number' ? skill.xp : 0,
      level: typeof skill.level === 'number' ? skill.level : levelFromXP(skill.xp || 0),
      emoji: skill.emoji || 'üåü',
      attributes: Array.isArray(skill.attributes) ? skill.attributes : ['–ª–æ–≤–∫–æ—Å—Ç—å', '—ç–Ω–µ—Ä–≥–∏—è'],
      lastUsed: skill.lastUsed || new Date().toISOString()
    }));

    parsed.skillGraph = parsed.skillGraph || { nodes: [], links: [] };
    parsed.habits = Array.isArray(parsed.habits) ? parsed.habits : [];
    parsed.quests = Array.isArray(parsed.quests) ? parsed.quests : [];
    parsed.chronicle = Array.isArray(parsed.chronicle) ? parsed.chronicle : [];
    parsed.journal = Array.isArray(parsed.journal) ? parsed.journal : [];
    parsed.fitnessActivities = Array.isArray(parsed.fitnessActivities) ? parsed.fitnessActivities : [];

    log('–ü–æ—Å–ª–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂:', JSON.stringify(parsed, null, 2));
    return parsed;
  } catch (e) {
    log('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:', e.message);
    showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞', 'error');
    return null;
  }
}

function saveCharacter(character) {
  if (!character) {
    log('–ù–µ–ª—å–∑—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—É—Å—Ç–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞');
    showNotification('–û—à–∏–±–∫–∞: –ø—É—Å—Ç–æ–π –ø–µ—Ä—Å–æ–Ω–∞–∂', 'error');
    return;
  }
  try {
    localStorage.setItem(STORAGE_KEY, JSON.stringify(character));
    log('–ü–µ—Ä—Å–æ–Ω–∞–∂ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ localStorage');
  } catch (e) {
    log('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:', e.message);
    showNotification('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞', 'error');
  }
}

function resetCharacter() {
  log('–°–±—Ä–æ—Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞');
  try {
    localStorage.removeItem(STORAGE_KEY);
    log('–î–∞–Ω–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —É–¥–∞–ª–µ–Ω—ã');
  } catch (e) {
    log('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:', e.message);
    showNotification('–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞', 'error');
  }
}

function createCharacterFromInit({ name, avatar, description }) {
  const character = structuredClone(defaultCharacter);
  character.name = name || defaultCharacter.name;
  character.avatar = avatar || defaultCharacter.avatar;
  character.generatedDescription = description || defaultCharacter.generatedDescription;
  saveCharacter(character);
  log('–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂:', JSON.stringify(character, null, 2));
  return character;
}

/**
 * –°—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ addSkill ‚Üí —Ç–µ–ø–µ—Ä—å –æ–±—ë—Ä—Ç–∫–∞ –Ω–∞–¥ addOrUpdateSkill
 */
function addSkill(character, skillData) {
  log('addSkill (–æ–±—ë—Ä—Ç–∫–∞) ‚Üí –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ addOrUpdateSkill');
  return addOrUpdateSkill(character, skillData);
}

/**
 * –°—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ addXP ‚Üí —Ç–µ–ø–µ—Ä—å –≤—ã–∑—ã–≤–∞–µ—Ç addOrUpdateSkill —Å XP
 */
function addXP(character, skillName, xp) {
  log(`addXP (–æ–±—ë—Ä—Ç–∫–∞) ‚Üí –¥–æ–±–∞–≤–ª—è–µ–º ${xp} XP –≤ –Ω–∞–≤—ã–∫ "${skillName}"`);
  return addOrUpdateSkill(character, { name: skillName, xp });
}

export {
  loadCharacter,
  saveCharacter,
  resetCharacter,
  createCharacterFromInit,
  addSkill,
  addXP
};
