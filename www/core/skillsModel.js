import { loadCharacter, saveCharacter } from './character.js';
import { applyProgression } from './progression.js';

const ALL_ATTRIBUTES = ["—Å–∏–ª–∞", "–ª–æ–≤–∫–æ—Å—Ç—å", "–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç", "—Ö–∞—Ä–∏–∑–º–∞", "–≤–æ–ª—è", "–¥—É—Ö", "–º—É–¥—Ä–æ—Å—Ç—å", "—ç–Ω–µ—Ä–≥–∏—è"];

const skillAttributeMap = {
  '–ì–æ—Ç–æ–≤–∫–∞': ['–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç', '–ª–æ–≤–∫–æ—Å—Ç—å', '–≤–æ–ª—è', '—ç–Ω–µ—Ä–≥–∏—è'],
  '–û—Ç–∂–∏–º–∞–Ω–∏—è': ['—Å–∏–ª–∞', '–≤–æ–ª—è', '—ç–Ω–µ—Ä–≥–∏—è', '–ª–æ–≤–∫–æ—Å—Ç—å'],
  '–ü–æ—Å–µ—â–µ–Ω–∏–µ –±–∞–Ω–∏': ['–¥—É—Ö', '—ç–Ω–µ—Ä–≥–∏—è', '–≤–æ–ª—è'],
  '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ': ['–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç', '–º—É–¥—Ä–æ—Å—Ç—å', '–≤–æ–ª—è', '—ç–Ω–µ—Ä–≥–∏—è'],
  '–ë–µ–≥': ['–ª–æ–≤–∫–æ—Å—Ç—å', '—Å–∏–ª–∞', '—ç–Ω–µ—Ä–≥–∏—è', '–≤–æ–ª—è'],
  '–ï–∑–¥–∞ –Ω–∞ –≤–µ–ª–æ—Å–∏–ø–µ–¥–µ': ['–ª–æ–≤–∫–æ—Å—Ç—å', '—Å–∏–ª–∞', '—ç–Ω–µ—Ä–≥–∏—è', '–≤–æ–ª—è'],
  '–ò–≥—Ä–∞ –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ': ['–ª–æ–≤–∫–æ—Å—Ç—å', '—ç–Ω–µ—Ä–≥–∏—è', '–≤–æ–ª—è', '–¥—É—Ö'],
  '–ò–≥—Ä–∞ –Ω–∞ –≥–∏—Ç–∞—Ä–µ': ['–ª–æ–≤–∫–æ—Å—Ç—å', '–≤–æ–ª—è', '—ç–Ω–µ—Ä–≥–∏—è'],
  '–ö—É–ª–∏–Ω–∞—Ä–∏—è': ['–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç', '–ª–æ–≤–∫–æ—Å—Ç—å', '–≤–æ–ª—è', '—ç–Ω–µ—Ä–≥–∏—è'],
  '–ú—É–∑—ã–∫–∞': ['–ª–æ–≤–∫–æ—Å—Ç—å', '–≤–æ–ª—è', '—ç–Ω–µ—Ä–≥–∏—è'],
  '–§–∏–∑–∏—á–µ—Å–∫–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞': ['—Å–∏–ª–∞', '–ª–æ–≤–∫–æ—Å—Ç—å', '—ç–Ω–µ—Ä–≥–∏—è', '–≤–æ–ª—è'],
  '–§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å': ['—Å–∏–ª–∞', '–ª–æ–≤–∫–æ—Å—Ç—å', '—ç–Ω–µ—Ä–≥–∏—è', '–≤–æ–ª—è'],
  '–ú—É–ª—å—Ç–∏–∑–∞–¥–∞—á–Ω–æ—Å—Ç—å': ['–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç', '–º—É–¥—Ä–æ—Å—Ç—å', '–≤–æ–ª—è', '—ç–Ω–µ—Ä–≥–∏—è']
};

/**
 * –°–∫–æ–ª—å–∫–æ XP –Ω—É–∂–Ω–æ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ —Å —É—Ä–æ–≤–Ω—è `level` –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π
 */
function xpForNextLevel(level) {
  const xp = (level + 1) * 10;
  console.log(`üìä XP –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ —Å —É—Ä–æ–≤–Ω—è ${level} ‚Üí ${level + 1}: ${xp}`);
  return xp;
}

/**
 * –í—ã—á–∏—Å–ª—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å –ø–æ —Å—É–º–º–∞—Ä–Ω–æ–º—É XP (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ!)
 */
function levelFromXP(xp) {
  if (xp <= 0) return 0;
  let remainingXp = xp;
  let level = 0;
  while (remainingXp >= (level + 1) * 10) {
    remainingXp -= (level + 1) * 10;
    level++;
  }
  return level;
}

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è UI: —É—Ä–æ–≤–µ–Ω—å, –æ—Å—Ç–∞—Ç–æ–∫ XP –∏ —Å–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ
 */
function xpDetails(xp) {
  let totalXp = xp;
  let level = 0;
  let needed = 10;

  while (totalXp >= needed) {
    totalXp -= needed;
    level++;
    needed = (level + 1) * 10;
  }

  console.log(`[üìä] xpDetails ‚Üí —É—Ä–æ–≤–µ–Ω—å ${level}, –æ—Å—Ç–∞—Ç–æ–∫ ${totalXp}, –Ω—É–∂–Ω–æ ${needed}`);
  return { level, remainder: totalXp, needed };
}

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –Ω–∞–≤—ã–∫–∏ (—Å —É—á—ë—Ç–æ–º "–∑–∞–±—ã–≤–∞–Ω–∏—è")
 */
function getAllSkills() {
  const character = loadCharacter();
  if (!character) {
    console.warn("‚ö†Ô∏è –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω ‚Üí –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –Ω–∞–≤—ã–∫–æ–≤");
    return [];
  }
  if (!character.skills) character.skills = [];

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
  if (!character.attributes || typeof character.attributes !== 'object') {
    character.attributes = Object.fromEntries(ALL_ATTRIBUTES.map(attr => [attr, { xp: 0, level: 0 }]));
  }

  const now = Date.now();
  character.skills = character.skills.map(skill => {
    if (skill.lastUsed) {
      const last = new Date(skill.lastUsed).getTime();
      const daysPassed = (now - last) / (1000 * 60 * 60 * 24);
      const weeks = Math.floor(daysPassed / 7);
      if (weeks > 0) {
        skill.xp = Math.max(0, skill.xp - weeks);
        console.log(`[üß†] –ù–∞–≤—ã–∫ "${skill.name}" –ø–æ—Ç–µ—Ä—è–ª ${weeks} XP –∑–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ`);
      }
    }
    skill.level = levelFromXP(skill.xp || 0);
    return skill;
  });

  saveCharacter(character);
  console.log("[üìò] –í—Å–µ –Ω–∞–≤—ã–∫–∏:", character.skills.map(s => ({ name: s.name, xp: s.xp, lvl: s.level })));
  return character.skills;
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–∞–≤—ã–∫
 */
function addOrUpdateSkill(character, {
  name,
  xp = 1,
  description = '',
  attributes = [],
  attribute = null,
  parent = null,
  emoji = 'üåü'
}) {
  if (!character || !name) {
    console.warn("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–≤—ã–∫–∞", { name, xp });
    return;
  }

  if (!character.attributes || typeof character.attributes !== 'object') {
    character.attributes = Object.fromEntries(ALL_ATTRIBUTES.map(attr => [attr, { xp: 0, level: 0 }]));
  }

  const validAttributes = skillAttributeMap[name.trim()] ||
    (Array.isArray(attributes) ? attributes.filter(attr => ALL_ATTRIBUTES.includes(attr)).slice(0, 4) : ['–ª–æ–≤–∫–æ—Å—Ç—å', '—ç–Ω–µ—Ä–≥–∏—è']);

  character.skills = character.skills || [];
  const nowIso = new Date().toISOString();

  let skill = character.skills.find(s => s.name.trim().toLowerCase() === name.trim().toLowerCase());
  let previousLevel = skill ? skill.level : 0;

  if (skill) {
    skill.xp = (skill.xp || 0) + xp;
    skill.lastUsed = nowIso;
    skill.description = skill.description || description;
    skill.attributes = validAttributes;
    skill.attribute = parent ? (attribute || null) : null;
    skill.parent = parent || null;
    skill.emoji = emoji || skill.emoji || 'üåü';
    console.log(`[‚öôÔ∏è] –ù–∞–≤—ã–∫ "${skill.name}" –æ–±–Ω–æ–≤–ª—ë–Ω: +${xp} XP (–∏—Ç–æ–≥–æ ${skill.xp})`);
  } else {
    skill = {
      name: name.trim(),
      description: description.trim(),
      attributes: validAttributes,
      attribute: parent ? (attribute || null) : null,
      parent: parent || null,
      xp,
      level: 0,
      lastUsed: nowIso,
      emoji: emoji || 'üåü'
    };
    character.skills.push(skill);
    console.log(`[üÜï] –ù–æ–≤—ã–π –Ω–∞–≤—ã–∫ "${skill.name}" —Å–æ–∑–¥–∞–Ω: ${xp} XP`);
  }

  skill.level = levelFromXP(skill.xp);
  if (skill.level > previousLevel) {
    console.log(`[üÜô] –ù–∞–≤—ã–∫ "${skill.name}" –ø–æ–≤—ã—Å–∏–ª —É—Ä–æ–≤–µ–Ω—å ‚Üí ${skill.level}`);
    applyProgression(character, skill); // –ø—Ä–∏ –∞–ø–µ –ø–µ—Ä–µ–¥–∞—ë–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–∞–ª—å—à–µ
  }

  saveCharacter(character);
}

/**
 * –ú–∞—Å—Å–æ–≤–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞–≤—ã–∫–æ–≤
 */
function setSkills(skillsList = []) {
  const character = loadCharacter();
  if (!character) return;

  if (!character.attributes || typeof character.attributes !== 'object') {
    character.attributes = Object.fromEntries(ALL_ATTRIBUTES.map(attr => [attr, { xp: 0, level: 0 }]));
  }

  const nowIso = new Date().toISOString();
  const seenSkills = new Set();
  const newSkills = [];

  for (const newSkill of skillsList) {
    const name = newSkill.name?.trim();
    if (!name || seenSkills.has(name.toLowerCase())) continue;
    seenSkills.add(name.toLowerCase());

    const validAttributes = skillAttributeMap[name] ||
      (Array.isArray(newSkill.attributes) ? newSkill.attributes.filter(attr => ALL_ATTRIBUTES.includes(attr)).slice(0, 4) : ['–ª–æ–≤–∫–æ—Å—Ç—å', '—ç–Ω–µ—Ä–≥–∏—è']);

    let existing = character.skills.find(s => s.name.toLowerCase() === name.toLowerCase());
    let previousLevel = existing ? existing.level : 0;

    if (existing) {
      existing.xp = (existing.xp || 0) + (newSkill.xp || 0);
      existing.description = existing.description || newSkill.description || '';
      existing.attributes = validAttributes;
      existing.attribute = newSkill.parent ? (newSkill.attribute || null) : null;
      existing.parent = newSkill.parent || null;
      existing.level = levelFromXP(existing.xp);
      existing.lastUsed = nowIso;
      existing.emoji = newSkill.emoji || existing.emoji || 'üåü';
      newSkills.push(existing);

      if (existing.level > previousLevel) {
        console.log(`[üÜô] –ù–∞–≤—ã–∫ "${name}" –ø–æ–≤—ã—Å–∏–ª —É—Ä–æ–≤–µ–Ω—å ‚Üí ${existing.level}`);
        applyProgression(character, existing);
      }
    } else {
      const skill = {
        name,
        description: newSkill.description || '',
        attributes: validAttributes,
        attribute: newSkill.parent ? (newSkill.attribute || null) : null,
        parent: newSkill.parent || null,
        xp: newSkill.xp || 0,
        level: levelFromXP(newSkill.xp || 0),
        lastUsed: nowIso,
        emoji: newSkill.emoji || 'üåü'
      };
      newSkills.push(skill);
    }
  }

  character.skills = newSkills;
  saveCharacter(character);

  if (typeof window.refreshSkills === 'function') {
    window.refreshSkills();
  }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–≤—ã–∫ –ø–æ –∏–º–µ–Ω–∏
 */
function getSkillByName(name) {
  const character = loadCharacter();
  if (!character) return null;
  return character.skills?.find(s => s.name.trim().toLowerCase() === name.trim().toLowerCase()) || null;
}

/**
 * –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –Ω–∞–≤—ã–∫–∏
 */
function clearSkills() {
  const character = loadCharacter();
  if (!character) return;
  character.skills = [];
  saveCharacter(character);
  if (typeof window.refreshSkills === 'function') {
    window.refreshSkills();
  }
}

export {
  getAllSkills,
  addOrUpdateSkill,
  setSkills,
  getSkillByName,
  clearSkills,
  levelFromXP,
  xpForNextLevel,
  xpDetails
};
