import { levelFromXP, xpForNextLevel } from './skillsModel.js';
import { saveCharacter } from './character.js';

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –Ω–∞–≤—ã–∫–∏ –≤ –≥—Ä–∞—Ñ –¥–ª—è D3.js –ø–∞—É—Ç–∏–Ω—ã
 */
function convertSkillsToGraph(skills, existingGraph = { nodes: [], links: [] }) {
  const ALL_ATTRIBUTES = ["—Å–∏–ª–∞", "–ª–æ–≤–∫–æ—Å—Ç—å", "–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç", "—Ö–∞—Ä–∏–∑–º–∞", "–≤–æ–ª—è", "–¥—É—Ö", "–º—É–¥—Ä–æ—Å—Ç—å", "—ç–Ω–µ—Ä–≥–∏—è"];

  // helper: –±–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∏—Ç—å id —É–∑–ª–∞ (—Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ –æ–±—ä–µ–∫—Ç)
  const getId = (v) => (v && typeof v === 'object' ? v.id : v);

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ —É–∑–ª–æ–≤
  const savedPositions = (existingGraph.nodes || []).reduce((acc, node) => {
    const id = getId(node.id ?? node);
    acc[id] = {
      x: node.x, y: node.y, fx: node.fx, fy: node.fy,
      type: node.type, xp: node.xp, level: node.level, emoji: node.emoji
    };
    return acc;
  }, {});

  const nodes = [
    ...ALL_ATTRIBUTES.map(attr => ({
      id: attr,
      type: "stat",
      ...savedPositions[attr]
    })),
    ...skills.map(skill => ({
      id: skill.name,
      type: "skill",
      xp: skill.xp || 0,
      level: skill.level || 0,
      emoji: skill.emoji || 'üåü',
      ...savedPositions[skill.name]
    }))
  ];

  // –ü–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º —Å–≤—è–∑–∏ (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ –∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ)
  const existingLinks = (existingGraph.links || []).filter(link => {
    const s = getId(link.source);
    const t = getId(link.target);
    return skills.some(skill => skill.name === s) && ALL_ATTRIBUTES.includes(t);
  });

  const newLinks = skills.flatMap(skill =>
    (skill.attributes || []).map(attr => ({
      source: skill.name,
      target: attr,
      value: (skill.xp || 1) / 2
    }))
  );

  const links = [
    ...existingLinks,
    ...newLinks.filter(nl => !existingLinks.some(el => getId(el.source) === nl.source && getId(el.target) === nl.target))
  ];

  return { nodes, links };
}

/**
 * –°—á–∏—Ç–∞–µ—Ç —Å—É–º–º–∞—Ä–Ω–æ–µ XP –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è
 */
function totalXpBeforeLevel(level) {
  let sum = 0;
  for (let i = 0; i < level; i++) {
    sum += xpForNextLevel(i);
  }
  return sum;
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —É—Ä–æ–≤–Ω–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ XP
 */
function applyAttributeProgress(character) {
  if (!character || !character.attributes) return 0;

  let lvlUps = 0;
  for (const [name, attr] of Object.entries(character.attributes)) {
    if (!attr || typeof attr.xp !== 'number') continue;

    const prevLevel = attr.level || 0;
    const newLevel = levelFromXP(attr.xp) || 0;

    if (newLevel !== prevLevel) {
      attr.level = newLevel;
      if (newLevel > prevLevel) lvlUps += (newLevel - prevLevel);
    }
  }
  return lvlUps;
}

/**
 * –ü—Ä–∏–º–µ–Ω—è–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
 * –û–±—â–∏–π —É—Ä–æ–≤–µ–Ω—å = floor(—Å—É–º–º–∞ —É—Ä–æ–≤–Ω–µ–π –∞—Ç—Ä–∏–±—É—Ç–æ–≤ / 10)
 */
function applyGlobalXP(character) {
  if (!character) return;

  const totalAttributeLevels = Object.values(character.attributes || {})
    .reduce((sum, attr) => sum + (attr.level || 0), 0);

  character.level = Math.floor(totalAttributeLevels / 10); // —Ü–µ–ª—ã–π ¬´–≥–ª–æ–±–∞–ª—å–Ω—ã–π¬ª —É—Ä–æ–≤–µ–Ω—å
  character.globalProgress = totalAttributeLevels % 10;     // –ø—Ä–æ–≥—Ä–µ—Å—Å –∫ —Å–ª–µ–¥. –≥–ª–æ–±. —É—Ä–æ–≤–Ω—é
  character.globalRequired = 10;                            // –Ω—É–∂–Ω–æ 10 –æ—á–∫–æ–≤ –∞—Ç—Ä–∏–±—É—Ç–æ–≤
}

/**
 * –í—ã–¥–∞—Ç—å –æ—á–∫–∏ –≤ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ó–ê –ü–û–í–´–®–ï–ù–ù–´–ï –£–†–û–í–ù–ò –Ω–∞–≤—ã–∫–∞.
 * –í–ù–ò–ú–ê–ù–ò–ï: –ó–î–ï–°–¨ –ù–ï –î–û–ë–ê–í–õ–Ø–ï–ú XP –ö –ù–ê–í–´–ö–£! –¢–æ–ª—å–∫–æ —Ä–∞–∑–¥–∞—ë–º –±–æ–Ω—É—Å—ã –∑–∞ –∞–ø—ã.
 */
function awardAttributesForSkillLevelUps(character, skill) {
  if (!character || !skill || !Array.isArray(skill.attributes)) return;

  // –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Ä–∫–µ—Ä ¬´–¥–æ –∫–∞–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è —É–∂–µ –Ω–∞–≥—Ä–∞–∂–¥–∞–ª–∏¬ª
  if (typeof skill.awardedLevel !== 'number') {
    // –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –ø–æ—è–≤–ª–µ–Ω–∏–∏ –Ω–∞–≤—ã–∫–∞ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –ø—Ä–æ—à–ª—ã–µ —É—Ä–æ–≤–Ω–∏ –Ω–µ –≤—ã–¥–∞—ë–º
    skill.awardedLevel = skill.level || 0;
    return;
  }

  const currentLevel = skill.level || 0;
  const alreadyAwarded = skill.awardedLevel || 0;

  if (currentLevel > alreadyAwarded) {
    const diff = currentLevel - alreadyAwarded;
    // –∑–∞ –∫–∞–∂–¥—ã–π –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å ‚Üí +1 XP –≤ –∫–∞–∂–¥—É—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É
    for (const attr of skill.attributes) {
      if (!character.attributes[attr]) {
        character.attributes[attr] = { xp: 0, level: 0 };
      }
      character.attributes[attr].xp += diff;
    }
    // –æ–±–Ω–æ–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä
    skill.awardedLevel = currentLevel;
  }
}

/**
 * –ü—Ä–∏–º–µ–Ω—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –≤—Å–µ–º –Ω–∞–≤—ã–∫–∞–º:
 *  - –ù–ï –¥–æ–±–∞–≤–ª—è–µ—Ç XP –∫ –Ω–∞–≤—ã–∫–∞–º,
 *  - –≤—ã–¥–∞—ë—Ç –∞—Ç—Ä–∏–±—É—Ç–∞–º –æ—á–∫–∏ —Ç–æ–ª—å–∫–æ –∑–∞ –Ω–æ–≤—ã–µ —É—Ä–æ–≤–Ω–∏ –Ω–∞–≤—ã–∫–æ–≤ (—á–µ—Ä–µ–∑ awardedLevel),
 *  - –ø–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ—Ç –≥—Ä–∞—Ñ,
 *  - –æ–±–Ω–æ–≤–ª—è–µ—Ç —É—Ä–æ–≤–Ω–∏ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å.
 */
function applyProgression(character, changedSkill = null) {
  if (!character) return null;

  // 1) —É –≤—Å–µ—Ö –Ω–∞–≤—ã–∫–æ–≤ —É—Ä–æ–≤–µ–Ω—å —É–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω —Å–Ω–∞—Ä—É–∂–∏ (–ø–æ—Å–ª–µ addOrUpdateSkill)
  //    –∑–¥–µ—Å—å —Ç–æ–ª—å–∫–æ —Ä–∞–∑–¥–∞—á–∞ –±–æ–Ω—É—Å–æ–≤ –∞—Ç—Ä–∏–±—É—Ç–∞–º –∑–∞ –ù–û–í–´–ï —É—Ä–æ–≤–Ω–∏
  if (changedSkill) {
    // —Ç–æ—á–µ—á–Ω–æ –ø–æ –∏–∑–º–µ–Ω—ë–Ω–Ω–æ–º—É –Ω–∞–≤—ã–∫—É
    const s = character.skills.find(x => x.name?.toLowerCase() === changedSkill.name?.toLowerCase());
    if (s) awardAttributesForSkillLevelUps(character, s);
  } else {
    // –∏–ª–∏ –ø–æ –≤—Å–µ–º (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ –º–∞—Å—Å–æ–≤–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å)
    for (const s of (character.skills || [])) {
      awardAttributesForSkillLevelUps(character, s);
    }
  }

  // 2) –≥—Ä–∞—Ñ –Ω–∞–≤—ã–∫–æ–≤
  character.skillGraph = convertSkillsToGraph(character.skills || [], character.skillGraph || { nodes: [], links: [] });

  // 3) –∞—Ç—Ä–∏–±—É—Ç—ã –∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
  applyAttributeProgress(character);
  applyGlobalXP(character);

  saveCharacter(character);
  return character;
}

/**
 * –ü—Ä–∏–º–µ–Ω—è–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (–¥–ª—è –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –∏ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è)
 * –ü–æ–ª–µ–∑–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –ø–æ—Å–ª–µ –ø—Ä–∞–≤–æ–∫ XP –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –Ω–∞–ø—Ä—è–º—É—é.
 */
function applyProgressionRules(character) {
  if (!character) return;
  applyAttributeProgress(character);
  applyGlobalXP(character);
  saveCharacter(character);
}

export {
  applyProgression,
  applyProgressionRules,
  convertSkillsToGraph,
  xpForNextLevel,
  totalXpBeforeLevel
};
